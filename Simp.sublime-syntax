%YAML 1.2
---

file_extensions:
  - simp
scope: source.simp

contexts:
  prototype:
    - include: comments

  main:
    - match: '\b(?i:declare)\b'
      scope: constant.other.placeholder
      push: declare

    - match: '\b(?i:main)\b'
      scope: constant.other.placeholder

    - match: '\b[a-zA-Z]+\b'
      scope: keyword.declaration.function.simp

    - match: '{'
      push: start


  declare:
    - include: builtIn

    - match: '\b[a-zA-Z]+\b'
      scope: variable.parameter.simp

    - match: '}'
      pop: true


  variables:
    - match: '[a-zA-Z]+\(\)'
      scope: variable.annotation.function.sim

    - match: '\b[a-zA-Z]+\b'
      scope: entity.name.variable.simp



  start:
    - include: keywords
    - include: builtIn
    - include: variables
    - include: expr

    - match: '}'
      pop: true


  keywords:
    - match: '\b(?i:return)|(?i:then)|(?i:else)|(?i:repeat)|(?i:for)\b'
      scope: support.type.simp

    - match: '(?i:if)|(?i:while)|(?i:until)'
      scope: support.type.simp
      push:
        - include: expr
        - match: '{|\n'
          pop: true

    - match: '{'
      push: start

    - match: '\b(?i:or)|(?i:and)|not\b'
      scope: keyword.operator.logical.simp

    - match: '\b(?i:false)|(?i:true)\b'
      scope: constant.language




  builtIn:
    - match: '\bskip\b'
      scope: string.quoted.double.block.simp

    - match: '\bread|write\b'
      scope: string.quoted.double.block.simp
      push:
        - include: numbers
        - include: symbs
        - match: '\b[a-zA-Z]+\b'
          scope: entity.name.function.simp

        - match: '\)'
          pop: true


  expr:
    - include: symbs
    - include: numbers
    - include: keywords
    - include: builtIn
    - include: variables

    - match: '\b[a-zA-Z]+\b'
      scope: entity.name.variable.simp


  numbers:
    - match: '\b(-)?[0-9]+\b'
      scope: constant.numeric.simp

  symbs:
    - match: '[\+\-\*\/\%]'
      scope: keyword.operator.arithmetic.simp

    - match: '==|!=|<=|<|>=|>|='
      scope: keyword.operator.logical.simp


  comments:
    - match: '~ '
      scope: punctuation.definition.comment.simp
      push:
        - meta_scope: comment.line.number-sign.simp
        - match: $\n?
          pop: true

    - match: '~/'
      scope: punctuation.definition.comment.simp
      push:
        - meta_scope: comment.block.documentation.simp
        - match: '/~'
          pop: true



#keyword.operator.assignment.simp
#support.function.builtin.simp
#variable.parameter.simp
#scope: variable.language.simp

#support.function.builtin.simp
